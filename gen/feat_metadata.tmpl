package iotago

// Code generated by go generate; DO NOT EDIT. Check gen/ directory instead.

import (
	"cmp"
	"bytes"

	"github.com/iotaledger/hive.go/lo"
	"github.com/iotaledger/hive.go/serializer/v2"
)

type {{.Name}}EntriesKey string
type {{.Name}}EntriesValue []byte
type {{.Name}}Entries map[{{.Name}}EntriesKey]{{.Name}}EntriesValue

// {{.Name}} is a feature which holds a map of key-value pairs.
// The keys must consist of ASCII characters only.
// The values are arbitrary byte slices.
type {{.Name}} struct {
	Entries {{.Name}}Entries `serix:""`
}

func ({{.Receiver}} {{.Name}}) Clone() Feature {
	copiedMap := make({{.Name}}Entries)
	for key, value := range {{.Receiver}}.Entries {
		copiedMap[key] = lo.CopySlice(value)
	}

	return &{{.Name}}{
		Entries: copiedMap,
	}
}

func ({{.Receiver}} {{.Name}}) StorageScore(_ *StorageScoreStructure, _ StorageScoreFunc) StorageScore {
	return 0
}

func ({{.Receiver}} {{.Name}}) WorkScore(_ *WorkScoreParameters) (WorkScore, error) {
	return 0, nil
}

func ({{.Receiver}} {{.Name}}) Compare(other Feature) int {
	return cmp.Compare({{.Receiver}}.Type(), other.Type())
}

func ({{.Receiver}} {{.Name}}) Equal(other Feature) bool {
	otherFeat, is := other.(*{{.Name}})
	if !is {
		return false
	}

	if len({{.Receiver}}.Entries) != len(otherFeat.Entries) {
		return false
	}

	for key, value := range {{.Receiver}}.Entries {
		otherValue, exists := otherFeat.Entries[key]
		if !exists {
			return false
		}

		if !bytes.Equal(value, otherValue) {
			return false
		}
	}

	return true
}

func ({{.Receiver}} {{.Name}}) Type() FeatureType {
	return {{.FeatureType}}
}

func ({{.Receiver}} {{.Name}}) mapSize() int {
	var size int

	// Map Length
	size += serializer.SmallTypeDenotationByteSize
	for key, value := range {{.Receiver}}.Entries {
		// Key Length + Key + Value Length + Value
		size += serializer.SmallTypeDenotationByteSize + len(key) + serializer.UInt16ByteSize + len(value)
	}

	return size
}

func ({{.Receiver}} {{.Name}}) Size() int {
	// FeatureType + Entries
	return serializer.SmallTypeDenotationByteSize + {{.Receiver}}.mapSize()
}
