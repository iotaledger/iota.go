package iotago

// Code generated by go generate; DO NOT EDIT. Check gen/ directory instead.

import (
	"bytes"
	"cmp"

	"github.com/iotaledger/hive.go/lo"
	"github.com/iotaledger/hive.go/serializer/v2"
)

type StateMetadataFeatureEntriesKey string
type StateMetadataFeatureEntriesValue []byte
type StateMetadataFeatureEntries map[StateMetadataFeatureEntriesKey]StateMetadataFeatureEntriesValue

// StateMetadataFeature is a feature which holds a map of key-value pairs.
// The keys must consist of ASCII characters only.
// The values are arbitrary byte slices.
type StateMetadataFeature struct {
	Entries StateMetadataFeatureEntries `serix:""`
}

func (m StateMetadataFeature) Clone() Feature {
	copiedMap := make(StateMetadataFeatureEntries)
	for key, value := range m.Entries {
		copiedMap[key] = lo.CopySlice(value)
	}

	return &StateMetadataFeature{
		Entries: copiedMap,
	}
}

func (m StateMetadataFeature) StorageScore(_ *StorageScoreStructure, _ StorageScoreFunc) StorageScore {
	return 0
}

func (m StateMetadataFeature) WorkScore(_ *WorkScoreParameters) (WorkScore, error) {
	return 0, nil
}

func (m StateMetadataFeature) Compare(other Feature) int {
	return cmp.Compare(m.Type(), other.Type())
}

func (m StateMetadataFeature) Equal(other Feature) bool {
	otherFeat, is := other.(*StateMetadataFeature)
	if !is {
		return false
	}

	if len(m.Entries) != len(otherFeat.Entries) {
		return false
	}

	for key, value := range m.Entries {
		otherValue, exists := otherFeat.Entries[key]
		if !exists {
			return false
		}

		if !bytes.Equal(value, otherValue) {
			return false
		}
	}

	return true
}

func (m StateMetadataFeature) Type() FeatureType {
	return FeatureStateMetadata
}

func (m StateMetadataFeature) mapSize() int {
	var size int

	// Map Length
	size += serializer.SmallTypeDenotationByteSize
	for key, value := range m.Entries {
		// Key Length + Key + Value Length + Value
		size += serializer.SmallTypeDenotationByteSize + len(key) + serializer.UInt16ByteSize + len(value)
	}

	return size
}

func (m StateMetadataFeature) Size() int {
	// FeatureType + Entries
	return serializer.SmallTypeDenotationByteSize + m.mapSize()
}
