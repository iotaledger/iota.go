package iotago

// Code generated by go generate; DO NOT EDIT. Check gen/ directory instead.

import (
	"bytes"
	"encoding/binary"
	"encoding/hex"
	"fmt"
	"sort"
	"sync"

	"golang.org/x/crypto/blake2b"

	"github.com/iotaledger/hive.go/ierrors"
	"github.com/iotaledger/iota.go/v4/hexutil"
)

const (
	SignedTransactionIDLength = IdentifierLength + SlotIndexLength
)

var (
	ErrInvalidSignedTransactionIDLength = ierrors.New("invalid signedTransactionID length")

	EmptySignedTransactionID = SignedTransactionID{}
)

// SignedTransactionID is a 32 byte hash value together with an 4 byte slot index.
type SignedTransactionID [SignedTransactionIDLength]byte

// SignedTransactionIDRepresentingData returns a new SignedTransactionID for the given data by hashing it with blake2b and associating it with the given slot index.
func SignedTransactionIDRepresentingData(slot SlotIndex, data []byte) SignedTransactionID {
	return NewSignedTransactionID(slot, blake2b.Sum256(data))
}

func NewSignedTransactionID(slot SlotIndex, idBytes Identifier) SignedTransactionID {
	t := SignedTransactionID{}
	copy(t[:], idBytes[:])
	binary.LittleEndian.PutUint32(t[IdentifierLength:], uint32(slot))

	return t
}

// SignedTransactionIDFromHexString converts the hex to a SignedTransactionID representation.
func SignedTransactionIDFromHexString(hex string) (SignedTransactionID, error) {
	b, err := hexutil.DecodeHex(hex)
	if err != nil {
		return EmptySignedTransactionID, err
	}

	s, _, err := SignedTransactionIDFromBytes(b)

	return s, err
}

// SignedTransactionIDFromBytes returns a new SignedTransactionID represented by the passed bytes.
func SignedTransactionIDFromBytes(b []byte) (SignedTransactionID, int, error) {
	if len(b) < SignedTransactionIDLength {
		return EmptySignedTransactionID, 0, ErrInvalidSignedTransactionIDLength
	}

	return SignedTransactionID(b), SignedTransactionIDLength, nil
}

// MustSignedTransactionIDFromHexString converts the hex to a SignedTransactionID representation.
func MustSignedTransactionIDFromHexString(hex string) SignedTransactionID {
	t, err := SignedTransactionIDFromHexString(hex)
	if err != nil {
		panic(err)
	}

	return t
}

func (t SignedTransactionID) Bytes() ([]byte, error) {
	return t[:], nil
}

func (t SignedTransactionID) MarshalText() (text []byte, err error) {
	dst := make([]byte, hex.EncodedLen(len(EmptySignedTransactionID)))
	hex.Encode(dst, t[:])

	return dst, nil
}

func (t *SignedTransactionID) UnmarshalText(text []byte) error {
	_, err := hex.Decode(t[:], text)

	return err
}

// Empty tells whether the SignedTransactionID is empty.
func (t SignedTransactionID) Empty() bool {
	return t == EmptySignedTransactionID
}

// ToHex converts the Identifier to its hex representation.
func (t SignedTransactionID) ToHex() string {
	return hexutil.EncodeHex(t[:])
}

func (t SignedTransactionID) String() string {
	return fmt.Sprintf("SignedTransactionID(%s:%d)", t.Alias(), t.Slot())
}

func (t SignedTransactionID) Slot() SlotIndex {
	return SlotIndex(binary.LittleEndian.Uint32(t[IdentifierLength:]))
}

// Index returns a slot index to conform with hive's IndexedID interface.
func (t SignedTransactionID) Index() SlotIndex {
	return t.Slot()
}

func (t SignedTransactionID) Identifier() Identifier {
	return Identifier(t[:IdentifierLength])
}

var (
	// SignedTransactionIDAliases contains a dictionary of identifiers associated to their human-readable alias.
	SignedTransactionIDAliases = make(map[SignedTransactionID]string)

	// signedTransactionIDAliasesMutex is the mutex that is used to synchronize access to the previous map.
	signedTransactionIDAliasesMutex = sync.RWMutex{}
)

// RegisterAlias allows to register a human-readable alias for the Identifier which will be used as a replacement for
// the String method.
func (t SignedTransactionID) RegisterAlias(alias string) {
	signedTransactionIDAliasesMutex.Lock()
	defer signedTransactionIDAliasesMutex.Unlock()

	SignedTransactionIDAliases[t] = alias
}

// Alias returns the human-readable alias of the Identifier (or the base58 encoded bytes of no alias was set).
func (t SignedTransactionID) Alias() (alias string) {
	signedTransactionIDAliasesMutex.RLock()
	defer signedTransactionIDAliasesMutex.RUnlock()

	if existingAlias, exists := SignedTransactionIDAliases[t]; exists {
		return existingAlias
	}

	return t.ToHex()
}

// UnregisterAlias allows to unregister a previously registered alias.
func (t SignedTransactionID) UnregisterAlias() {
	signedTransactionIDAliasesMutex.Lock()
	defer signedTransactionIDAliasesMutex.Unlock()

	delete(SignedTransactionIDAliases, t)
}

// Compare compares two SignedTransactionIDs.
func (t SignedTransactionID) Compare(other SignedTransactionID) int {
	return bytes.Compare(t[:], other[:])
}

type SignedTransactionIDs []SignedTransactionID

// ToHex converts the SignedTransactionIDs to their hex representation.
func (ids SignedTransactionIDs) ToHex() []string {
	hexIDs := make([]string, len(ids))
	for i, t := range ids {
		hexIDs[i] = hexutil.EncodeHex(t[:])
	}

	return hexIDs
}

// RemoveDupsAndSort removes duplicated SignedTransactionIDs and sorts the slice by the lexical ordering.
func (ids SignedTransactionIDs) RemoveDupsAndSort() SignedTransactionIDs {
	sorted := append(SignedTransactionIDs{}, ids...)
	sort.Slice(sorted, func(i, j int) bool {
		return bytes.Compare(sorted[i][:], sorted[j][:]) == -1
	})

	var result SignedTransactionIDs
	var prev SignedTransactionID
	for i, t := range sorted {
		if i == 0 || !bytes.Equal(prev[:], t[:]) {
			result = append(result, t)
		}
		prev = t
	}

	return result
}

// Sort sorts the SignedTransactionIDs lexically and in-place.
func (ids SignedTransactionIDs) Sort() {
	sort.Slice(ids, func(i, j int) bool {
		return ids[i].Compare(ids[j]) < 0
	})
}

// SignedTransactionIDsFromHexString converts the given block IDs from their hex to SignedTransactionID representation.
func SignedTransactionIDsFromHexString(SignedTransactionIDsHex []string) (SignedTransactionIDs, error) {
	result := make(SignedTransactionIDs, len(SignedTransactionIDsHex))

	for i, hexString := range SignedTransactionIDsHex {
		SignedTransactionID, err := SignedTransactionIDFromHexString(hexString)
		if err != nil {
			return nil, err
		}
		result[i] = SignedTransactionID
	}

	return result, nil
}
