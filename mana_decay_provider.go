package iotago

import (
	"github.com/iotaledger/hive.go/core/safemath"
	"github.com/iotaledger/hive.go/ierrors"
	"github.com/iotaledger/hive.go/lo"
)

// ManaDecayProvider calculates the mana decay and mana generation
// using fixed point arithmetic and a precomputed lookup table.
type ManaDecayProvider struct {
	timeProvider *TimeProvider

	// slotsPerEpochExponent is the number of slots in an epoch expressed as an exponent of 2.
	// (2**SlotsPerEpochExponent) == slots in an epoch.
	slotsPerEpochExponent uint64

	// bitsCount is the number of bits used to represent Mana.
	bitsCount uint64

	// generationRate is the amount of potential Mana generated by 1 IOTA in 1 slot.
	generationRate uint64 // the generation rate needs to be scaled by 2^-generationRateExponent

	// generationRateExponent is the scaling of generationRate expressed as an exponent of 2.
	generationRateExponent uint64

	// decayFactors is a lookup table of epoch index diff to mana decay factor (slice index 0 = 1 epoch).
	decayFactors []uint64 // the factors need to be scaled by 2^-decayFactorsExponent

	// decayFactorsLength is the length of the decayFactors lookup table.
	decayFactorsLength uint64

	// decayFactorsExponent is the scaling of decayFactors expressed as an exponent of 2.
	decayFactorsExponent uint64

	// decayFactorEpochsSum is an integer approximation of the sum of decay over epochs.
	decayFactorEpochsSum uint64 // the factor needs to be scaled by 2^-decayFactorEpochsSumExponent

	// decayFactorEpochsSumExponent is the scaling of decayFactorEpochsSum expressed as an exponent of 2.
	decayFactorEpochsSumExponent uint64
}

func NewManaDecayProvider(
	timeProvider *TimeProvider,
	slotsPerEpochExponent uint8,
	manaStructure *ManaStructure,
) *ManaDecayProvider {
	return &ManaDecayProvider{
		timeProvider:                 timeProvider,
		slotsPerEpochExponent:        uint64(slotsPerEpochExponent),
		bitsCount:                    uint64(manaStructure.BitsCount),
		generationRate:               uint64(manaStructure.GenerationRate),
		generationRateExponent:       uint64(manaStructure.GenerationRateExponent),
		decayFactors:                 lo.Map(manaStructure.DecayFactors, func(factor uint32) uint64 { return uint64(factor) }),
		decayFactorsLength:           uint64(len(manaStructure.DecayFactors)),
		decayFactorsExponent:         uint64(manaStructure.DecayFactorsExponent),
		decayFactorEpochsSum:         uint64(manaStructure.DecayFactorEpochsSum),
		decayFactorEpochsSumExponent: uint64(manaStructure.DecayFactorEpochsSumExponent),
	}
}

// decay performs mana decay without mana generation.
func (p *ManaDecayProvider) decay(value Mana, epochDiff EpochIndex) (Mana, error) {
	if value == 0 || epochDiff == 0 || p.decayFactorsLength == 0 {
		// no need to decay if the epoch index didn't change or no decay factors were given
		return value, nil
	}

	result := uint64(value)
	var err error

	// we keep applying the decay as long as epoch index diffs are left
	remainingEpochDiff := epochDiff
	for remainingEpochDiff > 0 {
		// we can't decay more than the available epoch index diffs
		// in the lookup table in this iteration
		diffsToDecay := remainingEpochDiff
		if diffsToDecay > EpochIndex(p.decayFactorsLength) {
			diffsToDecay = EpochIndex(p.decayFactorsLength)
		}
		remainingEpochDiff -= diffsToDecay

		// slice index 0 equals epoch index diff 1
		decayFactor := p.decayFactors[diffsToDecay-1]

		// apply the decay and scale the resulting value (fixed-point arithmetics)
		result, err = safemath.Safe64MulShift(result, decayFactor, p.decayFactorsExponent)
		if err != nil {
			return 0, ierrors.Wrap(err, "failed to calculate mana decay")
		}
	}

	return Mana(result), nil
}

// generateMana calculates the generated mana.
func (p *ManaDecayProvider) generateMana(value BaseToken, slotDiff SlotIndex) (Mana, error) {
	if slotDiff == 0 || p.generationRate == 0 {
		return 0, nil
	}

	result, err := safemath.Safe64MulShift(uint64(value), uint64(slotDiff)*p.generationRate, p.generationRateExponent)
	if err != nil {
		return 0, ierrors.Wrap(err, "failed to calculate mana generation")
	}

	return Mana(result), nil
}

// ManaWithDecay applies the decay to the given mana.
func (p *ManaDecayProvider) ManaWithDecay(storedMana Mana, creationSlot SlotIndex, targetSlot SlotIndex) (Mana, error) {
	creationEpoch := p.timeProvider.EpochFromSlot(creationSlot)
	targetEpoch := p.timeProvider.EpochFromSlot(targetSlot)

	if creationEpoch > targetEpoch {
		return 0, ierrors.Wrapf(ErrWrongEpochIndex, "the created epoch index was bigger than the target epoch index: %d > %d", creationEpoch, targetEpoch)
	}

	return p.decay(storedMana, targetEpoch-creationEpoch)
}

// ManaGenerationWithDecay calculates the generated mana and applies the decay to the result.
func (p *ManaDecayProvider) ManaGenerationWithDecay(amount BaseToken, creationSlot SlotIndex, targetSlot SlotIndex) (Mana, error) {
	creationEpoch := p.timeProvider.EpochFromSlot(creationSlot)
	targetEpoch := p.timeProvider.EpochFromSlot(targetSlot)

	if creationSlot > targetSlot {
		return 0, ierrors.Wrapf(ErrWrongEpochIndex, "the created slot index was bigger than the target slot index: %d > %d", creationSlot, targetSlot)
	}

	epochDiff := targetEpoch - creationEpoch

	//nolint:exhaustive // false-positive, we have a default case
	switch epochDiff {
	case 0:
		result, err := p.generateMana(amount, targetSlot-creationSlot)
		if err != nil {
			return 0, ierrors.Wrap(err, "failed to calculate generated mana")
		}

		return result, nil

	case 1:
		manaGeneratedFirstEpoch, err := p.generateMana(amount, p.timeProvider.SlotsBeforeNextEpoch(creationSlot))
		if err != nil {
			return 0, ierrors.Wrap(err, "failed to calculate generated mana in the first epoch")
		}

		manaDecayedFirstEpoch, err := p.decay(manaGeneratedFirstEpoch, 1)
		if err != nil {
			return 0, ierrors.Wrap(err, "failed to decay generated mana in the first epoch")
		}

		manaGeneratedSecondEpoch, err := p.generateMana(amount, p.timeProvider.SlotsSinceEpochStart(targetSlot))
		if err != nil {
			return 0, ierrors.Wrap(err, "failed to calculate generated mana in the second epoch")
		}

		result, err := safemath.SafeAdd(manaDecayedFirstEpoch, manaGeneratedSecondEpoch)
		if err != nil {
			return 0, ierrors.Wrap(err, "failed to calculate sum of generated mana")
		}

		return result, nil

	default:
		aux, err := safemath.Safe64MulShift(uint64(amount), p.decayFactorEpochsSum*p.generationRate, p.decayFactorEpochsSumExponent+p.generationRateExponent-p.slotsPerEpochExponent)
		if err != nil {
			return 0, ierrors.Wrap(err, "failed to calculate auxiliary value")
		}
		c := Mana(aux)

		manaGeneratedFirstEpoch, err := p.generateMana(amount, p.timeProvider.SlotsBeforeNextEpoch(creationSlot))
		if err != nil {
			return 0, ierrors.Wrap(err, "failed to calculate generated mana in the first epoch")
		}

		manaDecayedFirstEpoch, err := p.decay(manaGeneratedFirstEpoch, epochDiff)
		if err != nil {
			return 0, ierrors.Wrap(err, "failed to decay generated mana in the first epoch")
		}

		manaDecayedIntermediateEpochs, err := p.decay(c, epochDiff-1)
		if err != nil {
			return 0, ierrors.Wrap(err, "failed to decay generated mana in the intermediate epochs")
		}

		manaGeneratedLastEpoch, err := p.generateMana(amount, p.timeProvider.SlotsSinceEpochStart(targetSlot))
		if err != nil {
			return 0, ierrors.Wrap(err, "failed to calculate generated mana in the last epoch")
		}

		result, err := safemath.SafeAdd(c, manaGeneratedLastEpoch)
		if err != nil {
			return 0, ierrors.Wrap(err, "failed to calculate sum of generated mana of the last epoch")
		}

		result, err = safemath.SafeSub(result, c>>p.decayFactorsExponent)
		if err != nil {
			return 0, ierrors.Wrap(err, "failed to calculate subtraction of generated mana from the rounding term")
		}

		result, err = safemath.SafeSub(result, manaDecayedIntermediateEpochs)
		if err != nil {
			return 0, ierrors.Wrap(err, "failed to calculate subtraction of generated mana of intermediate epochs")
		}

		result, err = safemath.SafeAdd(result, manaDecayedFirstEpoch)
		if err != nil {
			return 0, ierrors.Wrap(err, "failed to calculate sum of generated mana of the first epoch")
		}

		return result, nil
	}
}

// RewardsWithDecay applies the decay to the given stored mana.
func (p *ManaDecayProvider) RewardsWithDecay(rewards Mana, rewardEpoch EpochIndex, claimedEpoch EpochIndex) (Mana, error) {
	if rewardEpoch > claimedEpoch {
		return 0, ierrors.Wrapf(ErrWrongEpochIndex, "the reward epoch index was bigger than the claiming epoch index: %d > %d", rewardEpoch, claimedEpoch)
	}

	return p.decay(rewards, claimedEpoch-rewardEpoch)
}
